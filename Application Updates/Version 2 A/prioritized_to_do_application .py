# -*- coding: utf-8 -*-
"""Prioritized To-Do Application

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ugurd_PT2Cv8d4TJ0ZauopDErEdc9Y2y

#Prioritized To-Do Application

Application to track To-Do tasks with priority labels.

##Recap:
### Version 1 A Progress Report:

* The Task Manager application has been developed with key functionalities for managing tasks, including adding, viewing, and deleting tasks.
* The CSV file is used for storage, and essential validation ensures user inputs are correct. However, issues with reading tasks from the CSV have been identified.

* Completed Features:
   1. CSV Initialization: The application initializes the CSV with headers (title, category, priority, deadline, status).
   2. Task Addition: Users can add tasks with validation for categories and priorities.
   3. Task Viewing: Users can view all tasks stored in the CSV.
   4. Task Deletion: Users can delete tasks with confirmation.
   5. Error Handling: Input validation informs users of invalid entries.

* Issues Encountered
   1. CSV Reading Errors: Tasks were not recognized correctly due to mismatches between data structure and headers.

* Next Steps
   1. Implement Task Modification: Allow users to update task attributes.
   2. Mark Task as Done: Add functionality to change task status.
   3. Filters and Sorting: Introduce filtering and sorting capabilities.
   4. Further Testing: Ensure all features work as intended after updates.

##Implementations made in Version 1 B
###Version 1 B Progress Report:


*   Completed Features:

   1. Fixed the CSV Reading Errors
   2. Implemented functions that allow users to modify the tasks added previously, mark tasks completed and view the tasks that were marked completed.
   3. Added shortcuts to the labels to reduce the time taken to enter inputs.
*   Issues Encountered:

    1. The time is not accepting a later immediate time if the deadline date is current date ( For example - if the deadline is today, 10-14-2024, when tried to enter a time like 13:00 it read as invalid input but accepted a later time of 18:00), hence I believe there is mismatch with current time.

* Next Steps:

    1. Implement front-end, start think about that.
    2. Implement Filters and Sort.
    3. Identify if any other functions can be implemented.

##Implementations made in Version 2 A
###Version 2 A Progress Report:


*   Completed Features:

   1. Core Functions are completed with the additional implementation of filter and sort funtions.
   2. Converted to dataframe.

*   Issues Encountered:

    1. Found it challenging to convert everything, but was able to complete.

* Next Steps:

    1. Implement front-end.
    2. Implement additonal functions like calendar view for better UI if time permits.
"""

##Version 2 A
import csv
from datetime import datetime

"""Initializing CSV Files:"""

import pandas as pd

# Define file paths
CSV_FILE = '/content/tasks.csv'
COMPLETED_TASKS_FILE = '/content/completed_tasks.csv'

# Initialize CSV with headers if they don't exist
def initialize_csv():
    # Define an empty DataFrame with required columns
    columns = ['title', 'category', 'priority', 'deadline', 'status']
    empty_df = pd.DataFrame(columns=columns)

    # Initialize tasks CSV file
    try:
        # Only create file if it doesn't exist
        with open(CSV_FILE, 'x') as f:
            empty_df.to_csv(f, index=False)
        print("Initialized tasks.csv with headers.")
    except FileExistsError:
        print("tasks.csv already exists.")

    # Initialize completed tasks CSV file
    try:
        with open(COMPLETED_TASKS_FILE, 'x') as f:
            empty_df.to_csv(f, index=False)
        print("Initialized completed_tasks.csv with headers.")
    except FileExistsError:
        print("completed_tasks.csv already exists.")

"""# Functions :

1.   Add Tasks
2.   View Tasks
3. Delete Tasks
4. Modify Tasks
5. Mark as Completed
6. View Completed Tasks
7. Filter Tasks
8. Sort Tasks
9. Exit


"""

# Function to add a task
def add_task():
    tasks_df = load_tasks()  # Load current tasks into DataFrame

    title = input("Enter task title: ")

    # Category input with shortcuts
    category = input("Enter category (W for Work, P for Personal, S for School, O for Others): ").strip().upper()
    category_mapping = {'W': 'Work', 'P': 'Personal', 'S': 'School', 'O': 'Others'}
    while category not in category_mapping:
        category = input("Invalid category. Please enter W, P, S, or O: ").strip().upper()
    category = category_mapping[category]

    # Priority input with shortcuts
    priority = input("Enter priority (H for High, M for Medium, L for Low): ").strip().capitalize()
    priority_mapping = {'H': 'High', 'M': 'Medium', 'L': 'Low'}
    while priority not in priority_mapping:
        priority = input("Invalid priority. Please enter H, M, or L: ").strip().capitalize()
    priority = priority_mapping[priority]

    # Deadline input
    while True:
        add_date = input("Do you want to add a deadline date? (y/n): ").strip().lower()
        if add_date == 'y':
            while True:
                deadline_date = input("Enter deadline date (MM-DD-YYYY): ").strip()
                try:
                    deadline_full = datetime.strptime(deadline_date, '%m-%d-%Y')  # Validate date format
                    today = datetime.now()

                    if deadline_full.date() < today.date():
                        print("Error: The date cannot be in the past. Please enter a future date.")
                    else:
                        if deadline_full.date() == today.date():  # Check for today
                            while True:
                                add_time = input("Do you want to add a deadline time? (y/n): ").strip().lower()
                                if add_time == 'y':
                                    while True:
                                        deadline_time = input("Enter deadline time (HH:MM, 24-hour format): ").strip()
                                        try:
                                            deadline_full_time = datetime.strptime(f"{deadline_date} {deadline_time}", '%m-%d-%Y %H:%M')
                                            if deadline_full_time < datetime.now():
                                                print("Error: The deadline time cannot be in the past.")
                                            else:
                                                deadline = f"{deadline_date} {deadline_time}"
                                                break
                                        except ValueError:
                                            print("Invalid time format. Please use HH:MM.")
                                    break
                                elif add_time == 'n':
                                    deadline = f"{deadline_date} 23:59"  # Default to the end of the day
                                    break
                                else:
                                    print("Invalid input. Please enter 'y' or 'n'.")
                        else:
                            while True:
                                add_time = input("Do you want to add a deadline time? (y/n): ").strip().lower()
                                if add_time == 'y':
                                    while True:
                                        deadline_time = input("Enter deadline time (HH:MM, 24-hour format): ").strip()
                                        try:
                                            deadline_full_time = datetime.strptime(f"{deadline_date} {deadline_time}", '%m-%d-%Y %H:%M')
                                            deadline = f"{deadline_date} {deadline_time}"
                                            break
                                        except ValueError:
                                            print("Invalid time format. Please use HH:MM.")
                                    break
                                elif add_time == 'n':
                                    deadline = f"{deadline_date} 23:59"  # Default to the end of the day
                                    break
                                else:
                                    print("Invalid input. Please enter 'y' or 'n'.")
                        break
                except ValueError:
                    print("Invalid date format. Please use MM-DD-YYYY.")
            break
        elif add_date == 'n':
            deadline = "None"
            break
        else:
            print("Invalid input. Please enter 'y' or 'n'.")

    status = "Not Done"

    # Append new task to DataFrame
    new_task = pd.DataFrame({
        'title': [title],
        'category': [category],
        'priority': [priority],
        'deadline': [deadline],
        'status': [status]
    })

    # Concatenate new task with existing DataFrame and save
    tasks_df = pd.concat([tasks_df, new_task], ignore_index=True)
    save_tasks(tasks_df)  # Save updated tasks DataFrame to CSV
    print("Task added successfully!\n")
    print(tasks_df)  # Display all tasks after adding

##View Tasks
"""def view_tasks(show_completed=False):
    tasks = read_tasks(show_completed)
    if not tasks:
        print("No tasks available.")
        return

    print("Current Tasks:")
    for i, task in enumerate(tasks, 1):
        print(f"{i}. {task['title']} - {task['status']}")
        print(f"     {task['category']} [{task['priority']}]")
        print(f"     Due: {task['deadline']}")
    print()"""

"""def read_tasks(show_completed=False):
    file_to_read = COMPLETED_TASKS_FILE if show_completed else CSV_FILE
    tasks = []
    with open(file_to_read, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            tasks.append(row)
    return tasks"""

def load_tasks(file_path=CSV_FILE):
    """Loads tasks from the CSV file into a DataFrame."""
    try:
        return pd.read_csv(file_path)
    except FileNotFoundError:
        return pd.DataFrame(columns=['title', 'category', 'priority', 'deadline', 'status'])

# Save tasks to the CSV file
def save_tasks(tasks_df, file_path=CSV_FILE):
    """Saves the DataFrame to the specified CSV file."""
    tasks_df.to_csv(file_path, index=False)

# Display tasks
def view_tasks(tasks_df=None):
    """Displays the tasks in a readable format."""
    if tasks_df is None:
        tasks_df = load_tasks()
    if tasks_df.empty:
        print("No tasks available.")
    else:
        print(tasks_df.to_string(index=True))

# Function to delete a task
def delete_task():
    tasks_df = load_tasks()
    if tasks_df.empty:
        print("No tasks available to delete.")
        return

    view_tasks()  # Show tasks before deletion

    try:
        task_index = int(input("Enter the task number to delete: "))
        if task_index < 0 or task_index >= len(tasks_df):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a valid task number.")
        return

    task_title = tasks_df.loc[task_index, 'title']
    confirmation = input(f"Are you sure you want to delete '{task_title}'? (y/n): ").strip().lower()
    if confirmation == 'y':
        tasks_df = tasks_df.drop(index=task_index).reset_index(drop=True)  # Delete the task and reset index
        save_tasks(tasks_df)  # Save updated tasks DataFrame to CSV
        print("Task deleted successfully.")
    else:
        print("Deletion canceled.")

def mark_task_done():
    """Marks a selected task as complete and moves it to the completed tasks file."""
    tasks_df = load_tasks()
    if tasks_df.empty:
        print("No tasks available to mark as complete.")
        return

    view_tasks(tasks_df)

    try:
        task_index = int(input("Enter the task number to mark as complete: "))
        if task_index < 0 or task_index >= len(tasks_df):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a number.")
        return

    # Update status and separate completed task
    tasks_df.at[task_index, 'status'] = "Done"
    completed_task = tasks_df.iloc[[task_index]]

    # Remove from tasks_df and save updates
    tasks_df = tasks_df.drop(task_index).reset_index(drop=True)
    save_tasks(tasks_df)

    # Append to completed tasks file
    completed_tasks_df = load_tasks(COMPLETED_TASKS_FILE)
    completed_tasks_df = pd.concat([completed_tasks_df, completed_task], ignore_index=True)
    save_tasks(completed_tasks_df, COMPLETED_TASKS_FILE)

    print(f"Task '{completed_task.iloc[0]['title']}' marked as complete.")

def load_completed_tasks(file_path=COMPLETED_TASKS_FILE):
    """Loads completed tasks from the CSV file into a DataFrame."""
    try:
        return pd.read_csv(file_path)
    except FileNotFoundError:
        return pd.DataFrame(columns=['title', 'category', 'priority', 'deadline', 'status'])

def save_completed_tasks(completed_tasks_df, file_path=COMPLETED_TASKS_FILE):
    """Saves completed tasks to the specified CSV file."""
    completed_tasks_df.to_csv(file_path, index=False)

def view_completed_tasks():
    """Displays the completed tasks from the COMPLETED_TASKS_FILE."""
    completed_tasks_df = load_completed_tasks()

    if completed_tasks_df.empty:
        print("No completed tasks available.")
    else:
        print("Completed Tasks:")
        print(completed_tasks_df.to_string(index=True))

def modify_task():
    tasks_df = load_tasks()
    if tasks_df.empty:
        print("No tasks available to modify.")
        return

    # Display current tasks
    view_tasks(tasks_df)
    try:
        task_index = int(input("Enter the task number to modify: "))
        if task_index < 0 or task_index >= len(tasks_df):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a number.")
        return

    selected_task = tasks_df.iloc[task_index]
    print(f"\nModifying Task: {selected_task['title']}")

    # Modify Title
    if input("Do you want to modify the title? (y/n): ").strip().lower() == 'y':
        new_title = input("Enter new task title: ").strip()
        tasks_df.at[task_index, 'title'] = new_title

    # Modify Category
    if input("Do you want to modify the category? (y/n): ").strip().lower() == 'y':
        while True:
            category = input("Enter new category (W for Work, P for Personal, S for School, O for Others): ").strip().upper()
            category_mapping = {'W': 'Work', 'P': 'Personal', 'S': 'School', 'O': 'Others'}
            if category in category_mapping:
                tasks_df.at[task_index, 'category'] = category_mapping[category]
                break
            else:
                print("Invalid category. Please enter W, P, S, or O.")

    # Modify Priority
    if input("Do you want to modify the priority? (y/n): ").strip().lower() == 'y':
        while True:
            priority = input("Enter new priority (H for High, M for Medium, L for Low): ").strip().capitalize()
            priority_mapping = {'H': 'High', 'M': 'Medium', 'L': 'Low'}
            if priority in priority_mapping:
                tasks_df.at[task_index, 'priority'] = priority_mapping[priority]
                break
            else:
                print("Invalid priority. Please enter H, M, or L.")

    # Modify Deadline
    if input("Do you want to modify the deadline? (y/n): ").strip().lower() == 'y':
        while True:
            add_date = input("Do you want to add a deadline date? (y/n): ").strip().lower()
            if add_date == 'y':
                while True:
                    deadline_date = input("Enter new deadline date (MM-DD-YYYY): ").strip()
                    try:
                        deadline_full = datetime.strptime(deadline_date, '%m-%d-%Y')
                        today = datetime.now()
                        if deadline_full.date() < today.date():
                            print("Error: The date cannot be in the past. Please enter a future date.")
                        else:
                            # Check if today
                            if deadline_full.date() == today.date():
                                while True:
                                    add_time = input("Do you want to add a deadline time? (y/n): ").strip().lower()
                                    if add_time == 'y':
                                        while True:
                                            deadline_time = input("Enter deadline time (HH:MM, 24-hour format): ").strip()
                                            try:
                                                deadline_full_time = datetime.strptime(f"{deadline_date} {deadline_time}", '%m-%d-%Y %H:%M')
                                                if deadline_full_time < datetime.now():
                                                    print("Error: The deadline time cannot be in the past.")
                                                else:
                                                    tasks_df.at[task_index, 'deadline'] = f"{deadline_date} {deadline_time}"
                                                    break
                                            except ValueError:
                                                print("Invalid time format. Please use HH:MM.")
                                        break
                                    elif add_time == 'n':
                                        tasks_df.at[task_index, 'deadline'] = f"{deadline_date} 23:59"
                                        break
                                    else:
                                        print("Invalid input. Please enter 'y' or 'n'.")
                            else:
                                while True:
                                    add_time = input("Do you want to add a deadline time? (y/n): ").strip().lower()
                                    if add_time == 'y':
                                        while True:
                                            deadline_time = input("Enter deadline time (HH:MM, 24-hour format): ").strip()
                                            try:
                                                tasks_df.at[task_index, 'deadline'] = f"{deadline_date} {deadline_time}"
                                                break
                                            except ValueError:
                                                print("Invalid time format. Please use HH:MM.")
                                        break
                                    elif add_time == 'n':
                                        tasks_df.at[task_index, 'deadline'] = f"{deadline_date} 23:59"
                                        break
                                    else:
                                        print("Invalid input. Please enter 'y' or 'n'.")
                            break
                    except ValueError:
                        print("Invalid date format. Please use MM-DD-YYYY.")
                break
            elif add_date == 'n':
                tasks_df.at[task_index, 'deadline'] = "None"
                break
            else:
                print("Invalid input. Please enter 'y' or 'n'.")

    # Save the updated tasks
    save_tasks(tasks_df)
    print("Task modified successfully!\n")
    view_tasks(tasks_df)  # Show updated tasks

def load_completed_tasks(file_path=COMPLETED_TASKS_FILE):
    """Loads completed tasks from the specified file."""
    try:
        return pd.read_csv(file_path)
    except FileNotFoundError:
        return pd.DataFrame(columns=['title', 'category', 'priority', 'deadline', 'status'])

def load_all_tasks():
    """Combines tasks from the main tasks file and the completed tasks file."""
    tasks_df = load_tasks()  # Load regular tasks
    completed_tasks_df = load_completed_tasks()  # Load completed tasks

    # Merge both DataFrames
    all_tasks_df = pd.concat([tasks_df, completed_tasks_df], ignore_index=True)
    return all_tasks_df

def filter_tasks():
    tasks_df = load_all_tasks()  # Load all tasks, including completed ones

    if tasks_df.empty:
        print("No tasks available to filter.")
        return

    print("\nFilter options:")
    filter_type = input("Filter by (C)ategory, (P)riority, or (S)tatus? ").strip().upper()

    if filter_type == 'C':
        category = input("Enter category to filter (Work, Personal, School, Others): ").strip().capitalize()
        filtered_tasks = tasks_df[tasks_df['category'] == category]
    elif filter_type == 'P':
        priority = input("Enter priority to filter (High, Medium, Low): ").strip().capitalize()
        filtered_tasks = tasks_df[tasks_df['priority'] == priority]
    elif filter_type == 'S':
        # Only two status options: "Done" or "Not Done"
        status = input("Filter by status (Done / Not Done): ").strip().capitalize()
        if status == "Done":
            filtered_tasks = tasks_df[tasks_df['status'] == "Done"]
        elif status == "Not done":
            filtered_tasks = tasks_df[tasks_df['status'] != "Done"]
        else:
            print("Invalid status filter. Please enter 'Done' or 'Not Done'.")
            return
    else:
        print("Invalid filter type. Please enter C, P, or S.")
        return

    if filtered_tasks.empty:
        print("No tasks match the specified filter.")
    else:
        view_tasks(filtered_tasks)

def sort_tasks():
    tasks_df = load_all_tasks()  # Load all tasks, including completed ones

    if tasks_df.empty:
        print("No tasks available to sort.")
        return

    print("\nSort options:")
    sort_by = input("Sort by (D)eadline, (P)riority, or (S)tatus? ").strip().upper()
    ascending = input("Sort in ascending order? (y/n): ").strip().lower() == 'y'

    if sort_by == 'D':
        if 'deadline' in tasks_df.columns:
            # Sort by deadline, handling missing values (None or empty strings)
            tasks_df['deadline'] = pd.to_datetime(tasks_df['deadline'], errors='coerce')
            sorted_tasks = tasks_df.sort_values(by='deadline', ascending=ascending)
        else:
            print("Deadline column is missing or invalid.")
            return
    elif sort_by == 'P':
        priority_mapping = {'High': 1, 'Medium': 2, 'Low': 3}
        tasks_df['priority_sort'] = tasks_df['priority'].map(priority_mapping)
        sorted_tasks = tasks_df.sort_values(by='priority_sort', ascending=ascending).drop(columns=['priority_sort'])
    elif sort_by == 'S':
        status_mapping = {'Not Started': 1, 'In Progress': 2, 'Done': 3}
        tasks_df['status_sort'] = tasks_df['status'].map(status_mapping)
        sorted_tasks = tasks_df.sort_values(by='status_sort', ascending=ascending).drop(columns=['status_sort'])
    else:
        print("Invalid sort option. Please enter D, P, or S.")
        return

    # Display the sorted tasks
    print("Sorted Tasks:")
    view_tasks(sorted_tasks)

def manage_tasks():
    initialize_csv()  # Initializes the CSV if it doesn't exist

    while True:
        print("\nTask Manager Menu:")
        print("1. Add Task [A]")
        print("2. View Tasks [V]")
        print("3. Delete Task [D]")
        print("4. Modify Task [M]")
        print("5. Mark Task as Complete [C]")
        print("6. View Completed Tasks [L]")
        print("7. Filter Tasks [F]")
        print("8. Sort Tasks [S]")
        print("9. Exit [X]")

        choice = input("Enter your choice: ").strip().upper()

        if choice in ['1', 'A']:
            add_task()
        elif choice in ['2', 'V']:
            view_tasks()
        elif choice in ['3', 'D']:
            delete_task()
        elif choice in ['4', 'M']:
            modify_task()
        elif choice in ['5', 'C']:
            mark_task_done()
        elif choice in ['6', 'L']:
            view_completed_tasks()
        elif choice in ['7', 'F']:
            filter_tasks()
        elif choice in ['8', 'S']:
            sort_tasks()
        elif choice in ['9', 'X']:
            confirmation = input("Are you sure you want to exit? (y/n): ").strip().lower()
            if confirmation == 'y':
                print("Exiting the Task Manager. Goodbye!")
                break
        else:
            print("Invalid choice. Please enter a valid option.")

##Function Call
if __name__ == "__main__":
    manage_tasks()