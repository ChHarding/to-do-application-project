# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tRnGh5fq7DpjdFMm74G4AIIDLPfsH5Jc
"""
"""Version 1 b Progress Report:
The Task Manager application has been developed with key functionalities for managing tasks, including adding, viewing, modifying and deleting tasks. The CSV file is used for storage, and essential validation ensures user inputs are correct.
Completed Features
CSV Initialization: The application initializes the CSV with headers (title, category, priority, deadline, status).
Task Addition: Users can add tasks with validation for categories and priorities.
Task Viewing: Users can view all tasks stored in the CSV.
Task Deletion: Users can delete tasks with confirmation.
Error Handling: Input validation informs users of invalid entries.
Implement Task Modification: Allow users to update task attributes.
Mark Task as Done: Add functionality to change task status.
To-do:
Filters and Sorting: Introduce filtering and sorting capabilities.
Add Frontend
Further Testing: Ensure all features work as intended after updates.
 """
# -*- coding: utf-8 -*-
import csv
from datetime import datetime

# Define the CSV file paths
CSV_FILE = '/content/tasks.csv'
COMPLETED_TASKS_FILE = '/content/completed_tasks.csv'

# Initialize CSV with headers if they don't exist
def initialize_csv():
    try:
        with open(CSV_FILE, mode='x', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['title', 'category', 'priority', 'deadline', 'status'])
    except FileExistsError:
        pass  # CSV already exists

    try:
        with open(COMPLETED_TASKS_FILE, mode='x', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['title', 'category', 'priority', 'deadline', 'status'])
    except FileExistsError:
        pass  # Completed tasks CSV already exists

def add_task():
    title = input("Enter task title: ")

    # Category input with shortcuts
    category_input = input("Enter category (W for Work, P for Personal, S for School): ").strip().upper()
    category_mapping = {'W': 'Work', 'P': 'Personal', 'S': 'School'}
    category = category_mapping.get(category_input, None)
    while category is None:
        category_input = input("Invalid category. Please enter W, P, or S: ").strip().upper()
        category = category_mapping.get(category_input, None)

    # Priority input
    priority = input("Enter priority (High, Medium, Low): ").strip().capitalize()
    while priority not in ['High', 'Medium', 'Low']:
        priority = input("Invalid priority. Please enter High, Medium, or Low: ").strip().capitalize()

    # Deadline input with validation loop
    while True:
        add_date = input("Do you want to add a deadline? (y/n): ").strip().lower()
        if add_date == 'y':
            deadline = input("Enter deadline (YYYY-MM-DD HH:MM): ")
            try:
                datetime.strptime(deadline, '%Y-%m-%d %H:%M')  # Validate date format
                break  # Exit loop if date is valid
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD HH:MM.")
        elif add_date == 'n':
            deadline = "None"
            break
        else:
            print("Invalid input. Please enter 'y' or 'n'.")

    status = "Not Done"

    with open(CSV_FILE, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([title, category, priority, deadline, status])
    print(f"Task added successfully!\n\n{title} - {status}\n    {category} [{priority}]\n    Due: {deadline}\n")

def view_tasks(show_completed=False):
    tasks = read_tasks(show_completed)
    if not tasks:
        print("No tasks available.")
        return

    print("Current Tasks:")
    for i, task in enumerate(tasks, 1):
        print(f"{i}. {task['title']} - {task['status']}")
        print(f"     {task['category']} [{task['priority']}]")
        print(f"     Due: {task['deadline']}")
    print()  # Extra newline for better readability

def read_tasks(show_completed=False):
    file_to_read = COMPLETED_TASKS_FILE if show_completed else CSV_FILE
    tasks = []
    with open(file_to_read, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            tasks.append(row)
    return tasks

def delete_task():
    tasks = read_tasks()
    if not tasks:
        print("No tasks available to delete.")
        return

    view_tasks()  # Show tasks before deletion
    try:
        task_index = int(input("Enter the task number to delete: ")) - 1
        if task_index < 0 or task_index >= len(tasks):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a number.")
        return

    confirmation = input(f"Are you sure you want to delete '{tasks[task_index]['title']}'? (y/n): ")
    if confirmation.lower() == 'y':
        tasks.pop(task_index)
        rewrite_csv(tasks)
        print("Task deleted successfully.")
    else:
        print("Deletion canceled.")

def rewrite_csv(tasks, completed=False):
    file_to_write = COMPLETED_TASKS_FILE if completed else CSV_FILE
    with open(file_to_write, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['title', 'category', 'priority', 'deadline', 'status'])  # Write header
        for task in tasks:
            writer.writerow([task['title'], task['category'], task['priority'], task['deadline'], task['status']])

def modify_task():
    tasks = read_tasks()
    if not tasks:
        print("No tasks available to modify.")
        return

    view_tasks()
    try:
        task_index = int(input("Enter the task number to modify: ")) - 1
        if task_index < 0 or task_index >= len(tasks):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a number.")
        return

    task = tasks[task_index]

    # Modify task attributes one by one
    if input("Do you want to change the task title? (y/n): ").strip().lower() == 'y':
        task['title'] = input("Enter new title: ")

    if input("Do you want to change the task category? (y/n): ").strip().lower() == 'y':
        category_input = input("Enter category (W for Work, P for Personal, S for School): ").strip().upper()
        category_mapping = {'W': 'Work', 'P': 'Personal', 'S': 'School'}
        category = category_mapping.get(category_input, None)
        while category is None:
            category_input = input("Invalid category. Please enter W, P, or S: ").strip().upper()
            category = category_mapping.get(category_input, None)
        task['category'] = category

    if input("Do you want to change the task priority? (y/n): ").strip().lower() == 'y':
        priority = input("Enter priority (High, Medium, Low): ").strip().capitalize()
        while priority not in ['High', 'Medium', 'Low']:
            priority = input("Invalid priority. Please enter High, Medium, or Low: ").strip().capitalize()
        task['priority'] = priority

    if input("Do you want to change the task deadline? (y/n): ").strip().lower() == 'y':
        while True:
            deadline = input("Enter new deadline (YYYY-MM-DD HH:MM) or type 'None': ").strip()
            if deadline.lower() == 'none':
                task['deadline'] = "None"
                break
            try:
                datetime.strptime(deadline, '%Y-%m-%d %H:%M')  # Validate date format
                task['deadline'] = deadline
                break  # Exit loop if date is valid
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD HH:MM.")

    tasks[task_index] = task
    rewrite_csv(tasks)
    print("Task modified successfully.")

def mark_task_done():
    tasks = read_tasks()
    if not tasks:
        print("No tasks available to mark as complete.")
        return

    incomplete_tasks = [task for task in tasks if task['status'] == "Not Done"]
    if not incomplete_tasks:
        print("All tasks are already complete.")
        return

    print("Incomplete Tasks:")
    for i, task in enumerate(incomplete_tasks, 1):
        print(f"{i}. {task['title']} - {task['status']}")
        print(f"     {task['category']} [{task['priority']}]")
        print(f"     Due: {task['deadline']}")

    try:
        task_index = int(input("Enter the task number to mark as complete: ")) - 1
        if task_index < 0 or task_index >= len(incomplete_tasks):
            print("Invalid task number. Please try again.")
            return
    except ValueError:
        print("Invalid input. Please enter a number.")
        return

    task = incomplete_tasks[task_index]
    task['status'] = "Complete"

    # Remove from current tasks and add to completed tasks
    tasks.remove(task)
    completed_tasks = read_tasks(show_completed=True)
    completed_tasks.append(task)
    rewrite_csv(tasks)
    rewrite_csv(completed_tasks, completed=True)
    print(f"Task '{task['title']}' marked as complete and moved to completed tasks.")

def manage_tasks():
    initialize_csv()
    while True:
        print("\nTask Manager Menu:")
        print("1. Add Task [A]")
        print("2. View Tasks [V]")
        print("3. Delete Task [D]")
        print("4. Modify Task [M]")
        print("5. Mark Task Done [C]")
        print("6. View Completed Tasks [L]")
        print("7. Exit [X]")
        choice = input("Enter your choice: ").strip().upper()

        if choice in ['1', 'A']:
            add_task()
        elif choice in ['2', 'V']:
            view_tasks()
        elif choice in ['3', 'D']:
            delete_task()
        elif choice in ['4', 'M']:
            modify_task()
        elif choice in ['5', 'C']:
            mark_task_done()
        elif choice in ['6', 'L']:
            view_tasks(show_completed=True)
        elif choice in ['7', 'X']:
            confirmation = input("Are you sure you want to exit? (y/n): ")
            if confirmation.lower() == 'y':
                print("Exiting the Task Manager. Goodbye!")
                break
        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    manage_tasks()
